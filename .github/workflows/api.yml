name: Api PR

on: 
  pull_request:
    branches:
      - main

env:
  app-name: myapp
  rg-name: myRg

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      cosmosdb:
        options: --name cosmosdb
        image: mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:latest
        ports:
          - 8081:8081
          - 10251:10251
          - 10252:10252
          - 10253:10253
          - 10254:10254
        env:
          AZURE_COSMOS_EMULATOR_PARTITION_COUNT: 5
          AZURE_COSMOS_EMULATOR_ENABLE_DATA_PERSISTENCE: "true"

    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'
          include-prerelease: true

      - name: Build
        run: dotnet build Booliba.sln --configuration 'Release Api'
        working-directory: src/services

      - name: Wait for Cosmos
        run: |
          echo "Waiting for Cosmos to start..."
          until [ `docker logs --tail 1 cosmosdb | tr -d '\r\n' | grep '^Started$'` ]; do printf '.'; sleep 2; done
          echo "It's up !"

      - name: Unit tests
        run: dotnet test Api.Tests/Tests.csproj --no-restore --collect "XPlat Code coverage" --filter Category=Unit
        working-directory: src/services/Api

      - name: Install Cosmos certificate
        run: |
          set -e
          curl -k https://localhost:8081/_explorer/emulator.pem > emulatorcert.crt
          sudo cp emulatorcert.crt /usr/local/share/ca-certificates/
          sudo update-ca-certificates

      - name: Component tests
        run: dotnet test Api.Tests/Tests.csproj --no-restore --collect "XPlat Code coverage" --filter Category=Component
        working-directory: src/services/Api

      - name: Publish
        run: dotnet publish Api/Api.csproj --configuration 'Release Api' -o api
        working-directory: src/services/Api

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: api
          path: src/services/Api/api/**
          if-no-files-found: error

  terraform_plan:
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.7

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: src/terraform

      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Prepare Azure environment variables
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        run: |
          echo "ARM_CLIENT_ID=`echo ${AZURE_CREDENTIALS} | jq -r .clientId`">> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=`echo ${AZURE_CREDENTIALS} | jq -r .clientSecret`">> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=`echo ${AZURE_CREDENTIALS} | jq -r .subscriptionId`">> $GITHUB_ENV
          echo "ARM_TENANT_ID=`echo ${AZURE_CREDENTIALS} | jq -r .tenantId`">> $GITHUB_ENV

      - name: Terraform Init
        id: init
        run: |
          terraform init --backend-config=backend.config -no-color
        working-directory: src/terraform

      - name: Terraform Validate
        id: validate
        
        run: terraform validate -no-color
        working-directory: src/terraform

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -detailed-exitcode -no-color
        working-directory: src/terraform
        continue-on-error: true

      - name: az cli logout
        run: az logout

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform_apply:
    runs-on: ubuntu-latest
    needs: [ terraform_plan]
    if: needs.terraform_plan.result == 'success'
    environment: PROD
    outputs:
      web_app_name: ${{ steps.output.outputs.web_app_name }}
    steps:
      - uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.7

      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Prepare Azure environment variables
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        run: |
          echo "ARM_CLIENT_ID=`echo ${AZURE_CREDENTIALS} | jq -r .clientId`" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=`echo ${AZURE_CREDENTIALS} | jq -r .clientSecret`" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=`echo ${AZURE_CREDENTIALS} | jq -r .subscriptionId`" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=`echo ${AZURE_CREDENTIALS} | jq -r .tenantId`" >> $GITHUB_ENV

      - name: Terraform Init
        id: init
        run: |
          terraform init --backend-config=backend.config -no-color
        working-directory: src/terraform

      - name: Terraform Apply
        id: apply
        run: |
          terraform apply -no-color -input=false -auto-approve
        working-directory: src/terraform

      - name: Terraform outputs
        id: output
        run: |
          tfOutput=`terraform output -json`
          webAppName=`echo ${tfOutput} | jq -r .web_app_name`"
          echo "::set-output name=web_app_name::${webAppName}"
        working-directory: src/terraform

      - name: az cli logout
        run: az logout

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          APPLY: "terraform\n${{ steps.apply.outputs.stdout }}"
          WEB_APP_NAME: ${{ needs.terraform_ }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Apply üìñ\`${{ steps.apply.outcome }}\`

            <details><summary>Show Apply</summary>

            \`\`\`\n
            ${process.env.APPLY}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  deploy_api:
    if: needs.build.result == 'success' && needs.terraform_apply.result == 'success'
    needs: [build, terraform_apply]
    runs-on: ubuntu-latest
    environment:
      name: PROD
      url: ${{ steps.deploywebapp.outputs.webapp-url }}
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2
        with:
          name: api
          path: api
      
      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy web app
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ needs.terraform_apply.outputs.web_app_name }}
          package: api

      - name: az cli logout
        run: az logout

