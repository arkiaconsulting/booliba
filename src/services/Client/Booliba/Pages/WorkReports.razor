@page "/"

@using Booliba.Data
@using System.Globalization
@inject BoolibaService BoolibaService

<div class="container-fluid">

    <h1>My work reports</h1>

    @if (workReports == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @foreach (var workReport in workReports)
        {
            <div class="card">
                <div class="card-header container-fluid">
                    <div class="row">
                        <div class="col-md-10">
                            <span>@workReport.Name</span>
                            <span class="badge rounded-pill badge-notification bg-primary">@workReport.TotalDayCount</span>
                        </div>
                        <div class="col-md-2 float-right text-right">
                            <button type="button" class="btn btn-warning btn-sm" @onclick="() => Remove(workReport)"><i class="fas fa-trash-alt"></i></button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    @foreach (var yearDays in workReport.DaysPerYear!)
                    {
                        <p class="card-title">@yearDays.Key</p>
                        <table class="table">
                            <tbody>
                                @foreach (var months in yearDays.GroupBy(d => d.Month))
                                {
                                    <tr>
                                        <th>@CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(months.Key)</th>
                                        <table class="table table-sm">
                                            <thead class="thead-light">
                                                @{
                                                    var monthDays = GetMonthDays(yearDays.Key, months.Key);
                                                }
                                                <tr>
                                                    @foreach (var day in monthDays)
                                                    {
                                                        <th class="@(OnWeekEnd(day.DayOfWeek))">
                                                            <button type="button" class="btn btn-sm btn-block text-center px-0" @onclick="() => workReport.Switch(day)"><small>@day.ToString("ddd")</small></button>
                                                        </th>
                                                    }
                                                </tr>
                                                <tr>
                                                    @foreach (var day in monthDays)
                                                    {
                                                        <th class="@(OnWeekEnd(day.DayOfWeek))">
                                                            <button type="button" class="btn btn-sm btn-block text-center px-0" @onclick="() => workReport.Switch(day)"><small>@day.Day</small></button>
                                                        </th>
                                                    }
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr>
                                                    @foreach (var day in monthDays)
                                                    {
                                                        <td class="@(months.Contains(day) ? "table-primary" : "table-default")"><div style="min-height: 25px" /></td>
                                                    }
                                                </tr>
                                            </tbody>
                                        </table>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
                <div class="card-footer">
                    <div class="row">
                        <div class="col-md-11">
                            @foreach (var recipient in workReport.Recipients)
                            {
                                <a href="#" class="badge rounded-pill badge-primary" @onclick="() => workReport.RemoveRecipient(recipient)">@recipient</a>
                            }
                            <a href="#" class="badge rounded-pill badge-primary" @onclick="() => OpenAddRecipient(workReport)">+</a>
                        </div>
                        <div class="col-md-1 float-right text-right">
                            <button type="button" class="btn btn-primary btn-sm" @onclick="() => workReport.Send()"><i class="fas fa-paper-plane"></i></button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>
@if (_addRecipientDialogOpen)
{
    <Booliba.Components.ModalDialog Title="Add a recipient"
                                WorkReportId=_workReportId!
                                OnEmailAdded="@OnEmailAdded" />
}

@code {
    private ICollection<DisplayWorkReportViewModel>? workReports = null;
    private bool _addRecipientDialogOpen;
    private Guid _workReportId = Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        workReports = (await BoolibaService.GetWorkReports())
        .Select(wr => new DisplayWorkReportViewModel(BoolibaService, wr.Id, wr.Name, wr.Days, wr.Recipients))
        .ToList();
    }

    private async Task Remove(DisplayWorkReportViewModel workReport)
    {
        await workReport.Remove();
        workReports?.Remove(workReport);
    }

    private IEnumerable<DateOnly> GetMonthDays(int year, int month)
    {
        return Enumerable.Range(1, DateTime.DaysInMonth(year, month))
            .Select(dayNumber => new DateOnly(year, month, dayNumber));
    }

    private void OpenAddRecipient(DisplayWorkReportViewModel workReport)
    {
        _workReportId = workReport.Id;
        _addRecipientDialogOpen = true;
    }

    private void OnEmailAdded(string? email)
    {
        if (email != null)
        {
            var workReport = workReports!.Single(wr => wr.Id == _workReportId);
            workReport.AddRecipient(email);
        }

        _addRecipientDialogOpen = false;
    }

    private string OnWeekEnd(DayOfWeek dayOfWeek) =>
        new[] { DayOfWeek.Saturday, DayOfWeek.Sunday }.Contains(dayOfWeek) ? "text-light bg-secondary" : string.Empty;
}
